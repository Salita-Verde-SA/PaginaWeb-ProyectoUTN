version: '3.8'

services:
  # Base de datos MongoDB para toda la data (publicaciones + usuarios)
  mongo:
    image: mongo:7
    container_name: mongo_db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    volumes:
      - mongo_data:/data/db
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.adminCommand({ ping: 1 })' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MinIO para almacenamiento de imágenes
  minio:
    image: minio/minio:latest
    container_name: minio_storage
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    networks:
      - backend_network
    ports:
      - "9000:9000"
    restart: unless-stopped

  # n8n para automatización y chatbot con IA
  n8n:
    image: docker.n8n.io/n8nio/n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      N8N_PROTOCOL: http
      NODE_ENV: production
      WEBHOOK_URL: http://localhost/n8n/
      GENERIC_TIMEZONE: America/Argentina/Buenos_Aires
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: false
      N8N_BLOCK_ENV_ACCESS_IN_NODE: false
      N8N_HOST: localhost
      N8N_PORT: 5678
    volumes:
      - "./n8n/n8n_data:/home/node/.n8n:Z"
    networks:
      - backend_network

  # Backend Java Spring Boot
  backend:
    build:
      context: ./backend
      dockerfile: DOCKERFILE
    container_name: backend_java
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATA_MONGODB_URI: "mongodb://mongo:27017/${MONGO_DATABASE}"
      SPRING_DATA_MONGODB_USERNAME: ${MONGO_USERNAME}
      SPRING_DATA_MONGODB_PASSWORD: ${MONGO_PASSWORD}
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    networks:
      - backend_network
    ports:
      - "8090:8090"
    depends_on:
      mongo:
        condition: service_healthy
      minio:
        condition: service_started
    restart: "no"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx como Frontend (servidor web separado)
  frontend:
    build:
      context: ./frontend
      dockerfile: DOCKERFILE
    container_name: frontend_web
    networks:
      - backend_network
    ports:
      - "8081:8081"
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8081/index.html",
        ]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  backend_network:
    driver: bridge

volumes:
  mongo_data:
    driver: local
  minio_data:
    driver: local
  n8n_data:
    driver: local
    build:
      context: ./frontend
      dockerfile: DOCKERFILE
    container_name: frontend_web
    networks:
      - backend_network
    ports:
      - "8081:8081"
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8081/index.html",
        ]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx como proxy inverso (no incluye frontend) No se usará para presentar en local, pero es necesario para eliminar el uso de tantos puertos
  # nginx:
  #   build:
  #     context: ./nginx
  #     dockerfile: DOCKERFILE
  #   container_name: nginx_proxy
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   networks:
  #     - backend_network
  #   depends_on:
  #     - backend
  #     - frontend
  #     - n8n
  #     - minio
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost/health"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3

# Definición de redes
networks:
  backend_network:
    driver: bridge
    ipam:
      config:
        #     - subnet: 10.89.0.0/32
        - subnet: 172.20.0.0/16 # En docker normal debería servir esto

# Definición de volúmenes persistentes
volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  minio_data:
    driver: local
  n8n_data:
    driver: local
