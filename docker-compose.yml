version: '3.8'

services:
  # Base de datos PostgreSQL para usuarios
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      POSTGRES_DB: usuarios_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d usuarios_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Base de datos MongoDB para publicaciones
  mongo:
    image: mongo:7
    container_name: mongo_db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: publicaciones_db
    volumes:
      - mongo_data:/data/db
    networks:
      - backend_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MinIO para almacenamiento de imágenes
  minio:
    image: minio/minio:latest
    container_name: minio_storage
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # n8n para automatización y chatbot con IA
  n8n:
    image: docker.n8n.io/n8nio/n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      N8N_PROTOCOL: http
      NODE_ENV: production
      WEBHOOK_URL: http://localhost/n8n/
      GENERIC_TIMEZONE: America/Argentina/Buenos_Aires
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      # Los valores se inyectan en las variables de n8n
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DATABASE}
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_SCHEMA: ${POSTGRES_SCHEMA}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}

      N8N_HOST: localhost
      N8N_PORT: 5678

    volumes:
      - ./n8n/n8n_data:/home/node/.n8n
    depends_on:
      - postgres
      - mongo

  # Backend Java Spring Boot
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend_java
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/usuarios_db
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin123
      SPRING_DATA_MONGODB_HOST: mongo
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: publicaciones_db
      SPRING_DATA_MONGODB_USERNAME: admin
      SPRING_DATA_MONGODB_PASSWORD: admin123
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    networks:
      - backend_network
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend (servidor web separado)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend_web
    networks:
      - backend_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8081/index.html"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx como proxy inverso (incluye frontend)
  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    networks:
      - backend_network
    depends_on:
      - backend
      - frontend
      - n8n
      - minio
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3

# Definición de redes
networks:
  backend_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Definición de volúmenes persistentes
volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  minio_data:
    driver: local
  n8n_data:
    driver: local